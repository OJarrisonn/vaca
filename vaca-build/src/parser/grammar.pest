program = { SOI ~ imports ~ forms ~ EOI }

imports = { vaca_import* }

forms = { form* }

lib = {
  SOI ~ 
  imports ~
  export_list ~
  (assingment_list | final_assingment_list)* ~
  EOI
}

form = {
  assingment_list
| final_assingment_list
| export_list
| function
| macrodef
| array_list
| code_block
| call
| infix_call
| literal
| dontcare
}

literal = {
  float
| integer
| string
| bool
| nil
| atom
| symbol
}

keyword   = { bool | nil }
operators = { ":" | "<{" | "}>" | "<(" | "[(" | "#(" | "#!(" | "@(" | "{" | "[" | "]" | "}" | ")" | "_" | "->" }

symbol = @{external_symbol | local_symbol}

operative_symbol = @{ !operators ~ ("!" | "@" | "#" | "$" | "%" | "&" | "*" | "-" | "+" | "=" | "`" | "~" | "^" | ":" | ">" | "<" | "," | "'" | "|" | "\\" | "/" | "?")+ }
external_symbol = @{ kebab_symbol ~ "/" ~ local_symbol }
local_symbol = @{ kebab_symbol ~ "!"? ~ "?"? ~ "'"? | operative_symbol}
kebab_symbol = @{!keyword ~ ('a'..'z' | 'A'..'Z' ) ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "-" )* }

dontcare = { "_" }
atom           = @{ ":" ~ ('a'..'z' | 'A'..'Z' ) ~ ('a'..'z' | 'A'..'Z' | '0'..'9' | "-")* }
float           = @{ "-"? ~ ('0'..'9')* ~ "." ~ ('0'..'9')+ | ('0'..'9')+ ~ "." ~ ('0'..'9')* }
integer        = @{ "-"? ~ ('0'..'9')+ }

string         = ${ "\"" ~ string_content ~ "\"" }
//string_content = @{ (!"\"" ~ ANY)* }
string_content = @{ char_content* }
//char_content   = @{ (!"'" ~ ANY)? }
char_content = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
}

bool           =  { "true" | "false" }
nil            =  { "nil" }

assingment_list = { "#(" ~ associations ~ ")" }
final_assingment_list = { "#!(" ~ associations ~ ")" }
export_list     = { "@(" ~ associations ~ ")" }
associations     = { association* }
association      = { local_symbol ~ form ~ description? }
description = { "\"" ~ description_content ~ "\"" }
description_content = {(!"\"" ~ ANY)*}

array_list = { "[" ~ forms ~ "]" }

function   = { "<(" ~ (captures ~ ":")? ~ (parameters ~ "->")? ~ form ~ ")" }
macrodef   = { "[(" ~ (parameters ~ "->")? ~ form ~ ")" }
call       = { "(" ~ callable ~ forms ~ ")" }
infix_call = { ":(" ~ form ~ form ~ form ~ ")" }
callable   = { form }
code_block = { "{" ~ forms ~ "}" }

captures  = { symbol* }
parameters = { local_symbol* }

vaca_import   = { "<{" ~ alias ~ path ~ ("->" ~ symbols)?~ "}>" }

symbols = { local_symbol* }
alias = { local_symbol }
path = { symbol }

WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT    = _{ ";;" ~ (!";;" ~ ANY)* ~ ";;" | ";" ~ (!NEWLINE ~ ANY)* ~ NEWLINE }
