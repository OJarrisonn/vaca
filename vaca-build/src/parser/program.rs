use pest::iterators::{Pair, Pairs};
use rustc_hash::FxHashMap;
use speedy::{Readable, Writable};
use vaca_core::{ErrorStack, Form, SymbolTable};

use super::{form::parse_form, library::LibraryCollection};
use crate::parser::Rule;

#[derive(Debug, Readable, Writable)]
pub struct Program {
    libraries: LibraryCollection,
    body: Vec<Form>
}

impl Program {
    /// Takes [`Pairs`] generated by [pest](https://pest.rs/) and try to build a Program from it
    /// Errors are returned as an ErrorStack
    pub fn build(pairs: Pairs<Rule>) -> Result<Self, ErrorStack> {
        let mut pairs = pairs.collect::<Vec<Pair<Rule>>>();

        pairs.pop(); // We drop the EOI rule
        let body = pairs.pop().unwrap(); // The body is the second rule
        let _imports = pairs.pop().unwrap(); // The imports are the first rule

        // Parse every rule inside body to a Form
        let body = body.into_inner()
            .map(|pair| parse_form(pair.into_inner().next().unwrap()))
            .collect();

        // TODO
        let libraries = FxHashMap::default();
        

        Ok(Self { libraries, body })
    }

    pub fn execute(self, table: &mut SymbolTable) -> Result<(), ErrorStack> {

        for form in self.body {
            form.eval(table)?;
        }

        Ok(())
    }
}